name: macOS App Build (PyQt5 + DMG)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

jobs:
  build-macos:
    strategy:
      matrix:
        os: [macos-13, macos-14]   # 13 = Intel, 14 = Apple Silicon
    runs-on: ${{ matrix.os }}

    env:
      APP_NAME: "Schematic Color Picker"
      ENTRYPOINT: "ui.py"        # <-- change if your launcher is different
      # Folders your app expects at runtime (relative to repo root)
      DATA_SVG: "bin/svg"
      DATA_THEMES: "bin/themes"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build .app with PyInstaller
        run: |
          pyinstaller \
            --clean \
            --windowed \
            --noconfirm \
            --name "$APP_NAME" \
            --hidden-import PyQt5.QtSvg \
            --collect-submodules PyQt5.QtSvg \
            --add-data "$DATA_SVG:$DATA_SVG" \
            --add-data "$DATA_THEMES:$DATA_THEMES" \
            "$ENTRYPOINT"

      - name: Verify app exists
        run: |
          ls -la "dist"
          test -d "dist/$APP_NAME.app"

      - name: Zip the .app (for quick download)
        run: |
          ditto -c -k --keepParent "dist/$APP_NAME.app" "$APP_NAME-mac.zip"

      - name: Create DMG with dmgbuild
        run: |
          python - <<'PY'
          import os, pathlib, dmgbuild, textwrap
      
          app_name = os.environ['APP_NAME']                  # e.g. "Schematic Color Picker"
          app_path = f"dist/{app_name}.app"
          dmg_name = f"{app_name}.dmg"
      
          # Write a minimal settings.py that dmgbuild expects
          settings_py = pathlib.Path("dmg_settings.py")
          settings_py.write_text(textwrap.dedent(f"""
          # dmgbuild settings
          files = [defines['app']]
          symlinks = {{'Applications': '/Applications'}}
          icon_locations = {{
              '{app_name}.app': (140, 200),
              'Applications': (460, 200),
          }}
          format = 'UDZO'
          compression_level = 9
          # Optional niceties:
          # icon_size = 128
          # window_rect = ((100, 100), (600, 400))
          # default_view = 'icon-view'
          """), encoding="utf-8")
      
          # Call dmgbuild with (output, volume_name, settings_file, defines)
          dmgbuild.build_dmg(
              filename=dmg_name,
              volume_name=app_name,
              settings_file=str(settings_py),
              defines={'app': app_path}
          )
          PY

      - name: Name artifacts by arch
        run: |
          ARCH=$(uname -m)   # x86_64 or arm64
          ditto -c -k --keepParent "dist/$APP_NAME.app" "$APP_NAME-mac-${ARCH}.zip"
          python - <<'PY'
          # (dmgbuild snippet here, just like before)
          PY
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-mac-${{ runner.arch }}   # x64 / ARM64 labels in Actions
          path: |
            ${{ env.APP_NAME }}-mac-*.zip
            ${{ env.APP_NAME }}.dmg
